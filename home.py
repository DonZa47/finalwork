from sklearn.neighbors import KNeighborsClassifier
import streamlit as st
import pandas as pd
import numpy as np
import os

st.set_page_config(page_title="‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö", layout="wide")

st.title("üìå ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö")
st.header("üë®üèΩ‚Äç‚öïÔ∏è ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏á‡πÅ‡∏£‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (KNN Classifier)")

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å
if os.path.exists('Liver_disease01.jpg'):
    st.image('Liver_disease01.jpg')
else:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û Liver_disease01.jpg")

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
dt = pd.read_csv('./cirrhosis.csv')
st.subheader("üß¨ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö")
st.write(dt.head())

# ‚úÖ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏®
st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏®")
sex_counts = dt['Sex'].value_counts()
sex_df = pd.DataFrame(sex_counts).rename(columns={'Sex': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'})
st.bar_chart(sex_df)

# ‚úÖ ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®
st.subheader("üìà ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®")
avg_age = dt.groupby('Sex')['Age'].mean()
st.bar_chart(avg_age)

# ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡πÉ‡∏ô X)
st.subheader("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏õ‡πâ‡∏≠‡∏ô")

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå 5 ‡∏ï‡∏±‡∏ß
A1 = st.number_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏ (Age)", min_value=1.0, max_value=100.0, value=50.0)
A2 = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®", options=[0, 1], format_func=lambda x: "‡∏´‡∏ç‡∏¥‡∏á" if x == 0 else "‡∏ä‡∏≤‡∏¢")
A3 = st.number_input("Bilirubin", value=1.0)
A4 = st.number_input("Albumin", value=3.0)
A5 = st.number_input("INR", value=1.0)

# üìå ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
if st.button("‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•"):
    try:
        X = dt[['Age', 'Sex', 'Bilirubin', 'Albumin', 'INR']]
        y = dt['Stage']  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô target column ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á

        model = KNeighborsClassifier(n_neighbors=3)
        model.fit(X, y)

        x_input = np.array([[A1, A2, A3, A4, A5]])
        prediction = model.predict(x_input)

        st.success(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà {prediction[0]}")
        
        if int(prediction[0]) >= 3:
            st.image("./img/H2.jpg", caption="‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á")
        else:
            st.image("./img/H3.jpg", caption="‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥")
    
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {e}")
