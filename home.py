import streamlit as st
import pandas as pd
import numpy as np
import os
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö", layout="wide")

st.title("üìå ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ KNN")
st.header("üë®üèΩ‚Äç‚öïÔ∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö (Cirrhosis)")

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å
if os.path.exists('Liver_disease01.jpg'):
    st.image('Liver_disease01.jpg', caption="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö")
else:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û Liver_disease01.jpg")

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
csv_path = 'cirrhosis.csv'
if os.path.exists(csv_path):
    df = pd.read_csv(csv_path)

    st.subheader("üß¨ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    st.write(df.head(10))

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    df = df.dropna()
    
    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Sex ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if df['Sex'].dtype == 'object':
        df['Sex'] = df['Sex'].map({'M': 1, 'F': 0})
    
    # ‚úÖ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏®
    st.subheader("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏®")
    sex_counts = df['Sex'].value_counts()
    st.bar_chart(sex_counts)

    # ‚úÖ ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®
    st.subheader("üìà ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®")
    avg_age = df.groupby('Sex')['Age'].mean()
    st.bar_chart(avg_age)

    # ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    st.subheader("üîÆ ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö")

    # ‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå 5 ‡∏ï‡∏±‡∏ß
    A1 = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏ (Age)", 1, 100, 45)
    A2 = st.selectbox("‡πÄ‡∏û‡∏®", options=[0, 1], format_func=lambda x: "‡∏´‡∏ç‡∏¥‡∏á" if x == 0 else "‡∏ä‡∏≤‡∏¢")
    A3 = st.number_input("Bilirubin", 0.0, 30.0, 1.2)
    A4 = st.number_input("Albumin", 0.0, 10.0, 3.5)
    A5 = st.number_input("INR", 0.0, 10.0, 1.0)

    if st.button("‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•"):
        try:
            X = df[['Age', 'Sex', 'Bilirubin', 'Albumin', 'INR']]
            y = df['Stage']  # ‡πÉ‡∏ä‡πâ 'Stage' ‡πÄ‡∏õ‡πá‡∏ô target

            # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)

            model = KNeighborsClassifier(n_neighbors=3)
            model.fit(X_scaled, y)

            # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            user_input = np.array([[A1, A2, A3, A4, A5]])
            user_input_scaled = scaler.transform(user_input)

            prediction = model.predict(user_input_scaled)
            st.success(f"üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà {prediction[0]}")

            # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if int(prediction[0]) >= 3:
                if os.path.exists('./img/H2.jpg'):
                    st.image('./img/H2.jpg', caption="‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á")
                else:
                    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û H2.jpg")
            else:
                if os.path.exists('./img/H3.jpg'):
                    st.image('./img/H3.jpg', caption="‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥")
                else:
                    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û H3.jpg")

        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
else:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cirrhosis.csv ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")

